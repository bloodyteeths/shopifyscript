name: ProofKit E2E Testing & Documentation

on:
  push:
    branches: [main, develop]
    paths:
      - "shopify-app/**"
      - "cypress/**"
      - "docs/**"
  pull_request:
    branches: [main]
    paths:
      - "shopify-app/**"
      - "cypress/**"
      - "docs/**"
  workflow_dispatch:
    inputs:
      upload_artifacts:
        description: "Upload test artifacts"
        required: false
        default: "true"
        type: boolean

jobs:
  e2e-tests:
    name: E2E Tests & Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        browser: [chrome, firefox]
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: |
            package-lock.json
            shopify-app/package-lock.json
            backend/package-lock.json

      - name: Install Dependencies
        run: |
          npm ci
          cd shopify-app && npm ci
          cd ../backend && npm ci

      - name: Verify Environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Chrome version: $(google-chrome --version || echo 'Chrome not found')"
          echo "Firefox version: $(firefox --version || echo 'Firefox not found')"

      - name: Setup Test Environment
        run: |
          # Create required directories
          mkdir -p docs/screenshots/funnel
          mkdir -p cypress/screenshots/funnel
          mkdir -p test-results

          # Initialize step documentation
          echo '[]' > docs/funnel-steps.json

          # Set test environment variables
          echo "CYPRESS_ENV=ci" >> $GITHUB_ENV
          echo "CYPRESS_BROWSER=${{ matrix.browser }}" >> $GITHUB_ENV

      - name: Start Backend Services
        run: |
          # Start backend in test mode
          cd backend
          npm run test:setup
          npm run dev &

          # Wait for backend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 1; done'
        env:
          NODE_ENV: test
          TENANT_ID: demo-tenant-1
          HMAC_SECRET: test-secret-key-for-demo
          PROMOTE_GATE_ENABLED: true

      - name: Start Shopify App
        run: |
          cd shopify-app
          npm run dev &

          # Wait for app to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 1; done'
        env:
          NODE_ENV: test
          SHOPIFY_API_KEY: test_key
          SHOPIFY_API_SECRET: test_secret

      - name: Install Cypress Dependencies
        run: |
          # Install Cypress binary and dependencies
          npx cypress install

          # Install additional dependencies for headless testing
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Run Cypress E2E Tests
        uses: cypress-io/github-action@v6
        with:
          browser: ${{ matrix.browser }}
          headless: true
          record: false
          config-file: cypress.config.ts
          spec: |
            cypress/e2e/01_install_oauth.cy.ts
            cypress/e2e/02_settings_persist.cy.ts
            cypress/e2e/03_safe_first_run_wizard.cy.ts
            cypress/e2e/04_script_preview_idempotent.cy.ts
            cypress/e2e/05_ai_drafts_validate.cy.ts
            cypress/e2e/06_intent_block_preview.cy.ts
            cypress/e2e/07_audience_attach_observe.cy.ts
            cypress/e2e/08_promote_true_go_live.cy.ts
        env:
          CYPRESS_TENANT_ID: demo-tenant-1
          CYPRESS_BACKEND_URL: http://localhost:3001
          CYPRESS_HMAC_SECRET: test-secret-key-for-demo
          CYPRESS_ENVIRONMENT: ci

      - name: Generate Documentation
        if: always()
        run: |
          # Generate funnel documentation from test results
          node docs/build-funnel-doc.mjs

          # Try to annotate images if Sharp is available
          npm list sharp > /dev/null 2>&1 && node docs/annotate-images.mjs || echo "Sharp not available, skipping annotation"

          # Generate test summary
          echo "## E2E Test Summary" > test-results/summary.md
          echo "" >> test-results/summary.md
          echo "**Browser**: ${{ matrix.browser }}" >> test-results/summary.md
          echo "**Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> test-results/summary.md
          echo "**Commit**: ${{ github.sha }}" >> test-results/summary.md
          echo "" >> test-results/summary.md

          # Count screenshots
          SCREENSHOT_COUNT=$(find cypress/screenshots -name "*.png" | wc -l)
          echo "**Screenshots Generated**: $SCREENSHOT_COUNT" >> test-results/summary.md

          # Check if documentation was generated
          if [ -f "docs/FUNNEL_E2E_GUIDE.md" ]; then
            echo "**Documentation**: ✅ Generated successfully" >> test-results/summary.md
          else
            echo "**Documentation**: ❌ Generation failed" >> test-results/summary.md
          fi

      - name: Upload Test Artifacts
        if: always() && (github.event.inputs.upload_artifacts == 'true' || github.event_name != 'workflow_dispatch')
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            cypress/screenshots/
            cypress/videos/
            docs/FUNNEL_E2E_GUIDE.md
            docs/funnel-steps.json
            docs/funnel-test-summary.json
            docs/screenshots/funnel-annotated/
            test-results/
          retention-days: 30

      - name: Upload Failed Test Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failed-test-screenshots-${{ matrix.browser }}
          path: cypress/screenshots/
          retention-days: 7

      - name: Comment PR with Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read test summary if available
            let summary = 'E2E tests completed';
            try {
              if (fs.existsSync('test-results/summary.md')) {
                summary = fs.readFileSync('test-results/summary.md', 'utf8');
              }
            } catch (error) {
              console.log('Could not read test summary:', error);
            }

            // Count artifacts
            let screenshotCount = 0;
            try {
              const screenshotsDir = 'cypress/screenshots';
              if (fs.existsSync(screenshotsDir)) {
                screenshotCount = fs.readdirSync(screenshotsDir, { recursive: true })
                  .filter(file => file.endsWith('.png')).length;
              }
            } catch (error) {
              console.log('Could not count screenshots:', error);
            }

            const comment = `## 🧪 E2E Test Results (${{ matrix.browser }})

            ${summary}

            📸 **Screenshots**: ${screenshotCount} generated
            📋 **Documentation**: ${fs.existsSync('docs/FUNNEL_E2E_GUIDE.md') ? '✅ Updated' : '❌ Failed'}

            <details>
            <summary>View Artifacts</summary>

            - Test screenshots and videos
            - Generated funnel documentation
            - Test execution logs
            - Accessibility audit results

            </details>
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Lint TypeScript
        run: |
          cd shopify-app && npm run lint || true
          cd ../cypress && npx tsc --noEmit || true

      - name: Format Check
        run: |
          cd shopify-app && npm run format:check || true

  accessibility-audit:
    name: Accessibility Audit
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: always()

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Accessibility Audit
        run: |
          # Install axe CLI
          npm install -g @axe-core/cli

          # Start services
          cd backend && npm run dev &
          cd shopify-app && npm run dev &

          # Wait for services
          sleep 30

          # Run accessibility audit on key pages
          axe http://localhost:3000/app/settings --save test-results/axe-settings.json || true
          axe http://localhost:3000/app/funnel/wizard --save test-results/axe-wizard.json || true

          # Generate accessibility report
          echo "# Accessibility Audit Results" > test-results/accessibility-report.md
          echo "" >> test-results/accessibility-report.md
          echo "Generated on: $(date)" >> test-results/accessibility-report.md
          echo "" >> test-results/accessibility-report.md

          if [ -f "test-results/axe-settings.json" ]; then
            echo "## Settings Page" >> test-results/accessibility-report.md
            echo "✅ Audit completed" >> test-results/accessibility-report.md
          fi

          if [ -f "test-results/axe-wizard.json" ]; then
            echo "## Wizard Page" >> test-results/accessibility-report.md
            echo "✅ Audit completed" >> test-results/accessibility-report.md
          fi

      - name: Upload Accessibility Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-audit-results
          path: test-results/
          retention-days: 30
